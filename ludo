
total_players(8).
pieces_per_user(4).
circle_length(52).

:- dynamic piece/3.
setup_ludo :-
    retractall(piece(_, _, _)),
    total_players(Count),
    pieces_per_user(Each),
    forall(between(1, Count, U),
           forall(between(1, Each, PID),
                  assertz(piece(U, PID, -1)))).


throw_die(Value) :-
    random_between(1, 6, Value).

launch_piece(U, PID) :-
    retract(piece(U, PID, -1)),
    assertz(piece(U, PID, 0)),
    format('User ~w placed piece ~w onto the board at position 0.~n', [U, PID]).

step_forward(U, PID, Moves) :-
    piece(U, PID, Old),
    New is (Old + Moves) mod 52,
    retract(piece(U, PID, Old)),
    assertz(piece(U, PID, New)),
    format('User ~w advanced piece ~w from ~w to ~w.~n', [U, PID, Old, New]).

select_active_piece(U, DiceRoll, PID) :-
    piece(U, PID, Pos),
    (Pos \= -1 ; DiceRoll = 6),
    !.


execute_turn(U) :-
    throw_die(Roll),
    format('User ~w rolled a ~w.~n', [U, Roll]),
    ( select_active_piece(U, Roll, PID)
    -> ( piece(U, PID, -1)
         -> launch_piece(U, PID)
         ;  step_forward(U, PID, Roll)
       )
    ; format('User ~w has no legal actions.~n', [U])
    ),
    (Roll = 6 -> execute_turn(U) ; true). 


cycle_all_players :-
    total_players(Count),
    forall(between(1, Count, U), execute_turn(U)).


begin_ludo :-
    setup_ludo,
    cycle_all_players.

